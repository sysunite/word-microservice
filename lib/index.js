#!/usr/bin/env node
// Generated by CoffeeScript 1.12.4
(function() {
  var Pomise, app, config, express, fs, logger, multer, path, pckjsn, port, upload;

  Pomise = require('bluebird');

  config = require('config');

  logger = require('./util/logger');

  express = require('express');

  pckjsn = require('../package.json');

  multer = require('multer');

  path = require('path');

  fs = require('fs');

  port = config.get('server.port');

  upload = multer({
    dest: 'files/',
    fileFilter: function(req, file, cb) {
      logger.debug(file.originalname.split('.')[1]);
      if (file.originalname.split('.')[1] !== 'docx') {
        req.fileValidationExtension = 'The only valid extension and format for templates are docx';
        return cb(null, false);
      } else {
        return cb(null, true);
      }
    }
  });

  app = express();


  /*
   Enabling CORS
   */

  app.all('*', function(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type');
    return next();
  });

  app.get('/about', function(req, res) {
    return res.send(pckjsn.name + " - " + pckjsn.version);
  });


  /*
   Accepts a docx as template, save it and returns the id of this new docx template
   for future calls
   */

  app.post('/template/add', upload.single('template'), function(req, res, next) {
    if (req.fileValidationExtension) {
      return res.status(400).send(req.fileValidationExtension);
    } else {
      return res.send(req.file.filename);
    }
  });


  /*
   Download a previously uploaded template based on a template ID.
   */

  app.get('/template/get', function(req, res) {
    var error, file;
    if (!req.query.templateId || !req.query.fileName) {
      return res.status(400).send('The templateId and fileName params are mandatory on the query');
    } else {
      try {
        file = path.join(__dirname, "../files/" + req.query.templateId);
        logger.debug(file);
        return fs.access(file, function(err) {
          if (!err) {
            res.set('Content-disposition', 'attachment; filename=' + req.query.fileName);
            return res.download(file);
          } else {
            return res.status(400).send("The requested templateId " + req.query.templateId + " does not exits");
          }
        });
      } catch (error1) {
        error = error1;
        return res.status(400).send("Unknown error");
      }
    }
  });


  /*
   Inject data into docx file according to a previously added template.
   And returns the generated word file.
   */

  app.post('/docx/inject', function(req, res) {
    return res.send('Hi there!');
  });

  app.listen(port, function() {
    return logger.info("word-microservice listening at " + port);
  });

}).call(this);
